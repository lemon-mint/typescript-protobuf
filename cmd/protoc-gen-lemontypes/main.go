package main

import (
	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/reflect/protoreflect"
)

func main() {
	opt := protogen.Options{}
	opt.Run(generate)
}

func generate(p *protogen.Plugin) error {
	for _, f := range p.Files {
		if !f.Generate {
			continue
		}
		compile(p, f)
	}
	return nil
}

func compile(p *protogen.Plugin, file *protogen.File) {
	name := file.GeneratedFilenamePrefix + "_lemontypes.pb.ts"
	f := p.NewGeneratedFile(name, file.GoImportPath)

	f.P("// Code generated by protoc-gen-lemontypes. DO NOT EDIT.")
	f.P()

	for i, e := range file.Enums {
		if i > 0 {
			f.P()
		}
		compileEnum(f, e)
	}

	for i, m := range file.Messages {
		if i > 0 {
			f.P()
		}
		compileMessage(f, m)
	}

}

func VarIntSize(u uint64) int {

	switch {
	case u < 1<<7:
		return 1
	case u < 1<<(7*2):
		return 2
	case u < 1<<7*3:
		return 3
	case u < 1<<7*4:
		return 4
	case u < 1<<7*5:
		return 5
	case u < 1<<7*6:
		return 6
	case u < 1<<7*7:
		return 7
	case u < 1<<7*8:
		return 8
	case u < 1<<(7*9):
		return 9
	default:
		return 10
	}
}

func compileEnum(f *protogen.GeneratedFile, e *protogen.Enum) {
	f.P("export enum ", e.Desc.Name(), " {")
	for _, v := range e.Values {
		n := v.Desc.Number()
		f.P("  ",
			v.Desc.Name(), " = ", n, ",",
			"	// SIZE=", VarIntSize(uint64(n)),
		)
	}
	f.P("}")
}

func compileMessage(f *protogen.GeneratedFile, m *protogen.Message) {
	f.P("export interface ", m.Desc.Name(), " {")
	for _, mf := range m.Fields {
		tt := mf.Desc.Kind()
		var typename string
		switch tt {
		case protoreflect.BoolKind:
			typename = "boolean"
		case protoreflect.Int32Kind, protoreflect.Uint32Kind:
			typename = "number"
		case protoreflect.Int64Kind, protoreflect.Uint64Kind:
			typename = "bigint"
		case protoreflect.StringKind:
			typename = "string"
		case protoreflect.MessageKind:
			typename = string(mf.Message.Desc.Name())
		case protoreflect.EnumKind:
			typename = string(mf.Enum.Desc.Name())
		default:
			typename = "any"
		}

		if mf.Desc.HasOptionalKeyword() {
			f.P("  ",
				mf.Desc.Name(), "?: ", typename,
			)
		} else {
			f.P("  ",
				mf.Desc.Name(), ": ", typename,
			)
		}

	}
	f.P("}")
}
